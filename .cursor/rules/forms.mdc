---
description: Cuando necesites haceer forms
globs: 
alwaysApply: false
---
# Form Guidelines

## Estructura Base

### Componente de Formulario (index.tsx)
```typescript
interface Props {
  onSubmit: (data: FormValues) => void
  initialValues?: Partial<FormValues>
}

export const ExampleForm = ({ onSubmit, initialValues }: Props) => {
  const form = useExampleForm(initialValues)
  const { register, handleSubmit, formState: { errors } } = form

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <FormField
        control={form.control}
        name="fieldName"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Field Label</FormLabel>
            <FormControl>
              <Input {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      
      <Button type="submit">Submit</Button>
    </form>
  )
}
```

### Hook del Formulario (useExampleForm.ts)
```typescript
import { z } from 'zod'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'

const schema = z.object({
  fieldName: z.string().min(1, 'Campo requerido'),
  email: z.string().email('Email inválido'),
  age: z.number().min(18, 'Debe ser mayor de edad')
})

export type FormValues = z.infer<typeof schema>

export const useExampleForm = (initialValues?: Partial<FormValues>) => {
  return useForm<FormValues>({
    resolver: zodResolver(schema),
    defaultValues: {
      fieldName: '',
      email: '',
      age: undefined,
      ...initialValues
    },
    mode: 'onChange'
  })
}
```

## Estructura de Archivos
```
components/
  ExampleForm/
    ├── index.tsx          # Componente del formulario
    ├── useExampleForm.ts  # Hook y validación
    └── types.ts           # Tipos compartidos (opcional)
```

## Mejores Prácticas

### Validación
- Usar Zod para schemas
- Definir mensajes de error claros
- Validar en onChange por defecto
- Tipos inferidos del schema
- Validaciones personalizadas cuando necesario

### Composición
- Un formulario por archivo
- Hook separado para la lógica
- Componentes de campo reutilizables
- Manejar estados de error y carga
- Separar validación de UI

### Control de Campos
```typescript
// Campo controlado con FormField
<FormField
  control={form.control}
  name="fieldName"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Label</FormLabel>
      <FormControl>
        <Input {...field} />
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>

// Campo controlado directo
<input
  {...register('fieldName', {
    required: 'Campo requerido'
  })}
/>
```

### Manejo de Errores
```typescript
// En el componente
const { errors } = formState

// En el campo
{errors.fieldName && (
  <span className="text-red-500">
    {errors.fieldName.message}
  </span>
)}
```

### Estados del Formulario
```typescript
const {
  formState: {
    isSubmitting,
    isDirty,
    isValid,
    errors
  }
} = form

// Deshabilitar botón
<Button
  type="submit"
  disabled={isSubmitting || !isDirty || !isValid}
>
  {isSubmitting ? 'Enviando...' : 'Enviar'}
</Button>
```

### Valores por Defecto
```typescript
const defaultValues = {
  fieldName: '',
  email: '',
  // ... más campos
}

const form = useForm({
  defaultValues,
  // ... resto de opciones
})
```

### Reset y Limpieza
```typescript
const form = useForm()

// Reset completo
const handleReset = () => {
  form.reset()
}

// Reset a valores específicos
const handleResetToValues = () => {
  form.reset({
    fieldName: 'nuevo valor',
    // ... más campos
  })
}
```

### Transformación de Datos
```typescript
const onSubmit = (data: FormValues) => {
  // Transformar antes de enviar
  const transformed = {
    ...data,
    age: Number(data.age),
    updatedAt: new Date()
  }
  
  // Enviar datos
  submitToAPI(transformed)
}
```
