---
description: 
globs: 
alwaysApply: true
---
# Data Layer Guidelines

## Flujo de Trabajo
1. **Verificar Schema** → Asegurarse que la entidad existe en `instant.schema.ts`
2. **Crear Hooks** → Generar en `db/[entidad].ts`
3. **Implementar CRUD** → Crear queries y mutations necesarias
4. **Usar en Componentes** → Importar y usar hooks

## 1. Schema (instant.schema.ts)

### Entities
```typescript
entities: {
  posts: i.entity({
    title: i.string(),
    content: i.string().optional(),
    authorId: i.string().indexed(),
    createdAt: i.number().indexed(),
    isPublished: i.boolean().optional(),
  }),
  users: i.entity({
    email: i.string().unique().indexed(),
    name: i.string().optional(),
  }),
}
```

### Links (Relaciones)
```typescript
links: {
  userPosts: {
    forward: { on: 'users', has: 'many', label: 'posts' },
    reverse: { on: 'posts', has: 'one', label: 'author' }
  }
}
```

### Rooms (Real-time)
```typescript
rooms: {
  chat: {
    presence: i.entity({
      name: i.string(),
      avatar: i.string().optional(),
    }),
    topics: {
      messages: i.entity({
        content: i.string(),
        senderId: i.string(),
        timestamp: i.number(),
      })
    }
  }
}
```

## 2. Plantilla CRUD

```typescript
import { AppSchema, db } from './client';
import { id, InstaQLEntity, tx } from '@instantdb/react';

// Definición de tipo para la entidad
export type Entity = InstaQLEntity<AppSchema, 'entityName'>;

// Hook de consulta para obtener entidades del usuario actual
export function useEntities() {
  const { user } = db.useAuth();

  const { isLoading, error, data } = db.useQuery({
    entityName: {
      $: {
        where: {
          userId: user?.id || '',
        },
      },
    },
  });

  return {
    isLoading,
    error,
    entities: (data?.entityName || []) as Entity[],
  };
}

// Tipo de entrada para crear/actualizar entidades
type EntityInput = Pick<Entity, 'field1' | 'field2' | 'field3'>;

// Mutación para crear entidad
export async function createEntity({ input, userId }: { input: EntityInput; userId: string }) {
  const entityId = id();
  const now = Date.now();

  await db.transact(
    tx.entityName[entityId].update({
      ...input,
      userId,
      createdAt: now,
      updatedAt: now,
    })
  );

  return entityId;
}

// Mutación para actualizar entidad
export async function updateEntity({ entityId, input }: { entityId: string; input: Partial<EntityInput> }) {
  await db.transact(
    tx.entityName[entityId].update({
      ...input,
      updatedAt: Date.now(),
    })
  );
}

// Mutación para eliminar entidad
export async function deleteEntity({ entityId }: { entityId: string }) {
  await db.transact(tx.entityName[entityId].delete());
}
```

## 3. Uso en Componentes

```typescript
import { useEntities, createEntity } from '@/db/entity';

export function EntityList() {
  const { entities, isLoading } = useEntities();
  
  if (isLoading) return <div>Cargando...</div>;

  return (
    <div>
      {entities.map(entity => (
        <div key={entity.id}>{entity.field1}</div>
      ))}
    </div>
  );
}
```

## Patrones de Implementación

### Schema
- Define todos los modelos en `instant.schema.ts`
- Usa índices para campos que se usarán en consultas frecuentes
- Marca campos opcionales cuando sea apropiado
- Define relaciones usando `links`
- Usa `rooms` para funcionalidades en tiempo real

### Queries
- Usar hooks para consultas (`useQuery`)
- Implementar filtrado por usuario cuando sea necesario
- Manejar estados de carga y error
- Tipar correctamente los resultados

### Mutations
- Usar transacciones para operaciones CRUD
- Mantener timestamps actualizados (`createdAt`, `updatedAt`)
- Validar inputs antes de la mutación
- Retornar IDs o datos relevantes
- Incluir userId para relaciones con el usuario

### Tipos
- Definir tipos para entidades usando `InstaQLEntity`
- Crear tipos para inputs usando `Pick` o `Partial`
- Tipar correctamente parámetros y retornos
- Usar tipos genéricos cuando sea apropiado

## Mejores Prácticas
- Mantén la lógica de datos separada de los componentes
- Usa hooks específicos para cada entidad
- Valida todas las entradas de usuario
- Maneja errores apropiadamente
- Usa tipado adecuado para todas las operaciones
- Mantén las operaciones de base de datos en hooks/funciones dedicadas
- Define permisos en `instant.perms.ts`

## Estructura de Archivos
```
db/
  ├── client.ts           # Configuración de InstantDB
  ├── entity.ts           # CRUD para una entidad
  ├── types.ts            # Tipos compartidos
  └── utils/
      ├── queries.ts      # Utilidades para queries
      └── mutations.ts    # Utilidades para mutations
```

## Comandos Útiles

```bash
# Subir schema
npx instant-cli@latest push schema

# Subir permisos
npx instant-cli@latest push perms

# Ver datos en Explorer
npx instant-cli@latest explorer
```
